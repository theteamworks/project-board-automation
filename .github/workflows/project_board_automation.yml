---


name: 'Project board automation'

"on":
  pull_request:
    branches: [main]
    types: [edited, synchronize, opened, reopened, labeled, unlabeled, ready_for_review, review_requested, converted_to_draft]
  pull_request_review:
    types: [submitted]


#######
## Config
#######

# Set the team/project specific varaibles
env:
  ORGANIZATION: theteamworks
  PROJECT_NUMBER: 3
  PR_URL: ${{ github.event.pull_request.html_url }}
  GITHUB_TOKEN: ${{ secrets.BOARD_AUTOMATION }}
  EXCLUDE_LABEL: 'no-issue'
  IN_PROGRESS_COLUMN_NAME: '"IN_PROGRESS"'
  REVIEW_REQUIRED_COLUMN_NAME: '"REVIEW_REQUIRED"'
  CHANGES_REQUESTED_COLUMN_NAME: '"CHANGES_REQUESTED"'
  APPROVED_COLUMN_NAME: '"APPROVED"'
  MERGED_COLUMN_NAME: '"MERGED"'
  ITERATION_FIELD_NAME: Iteration   # See project settings (default is `Iteration`)

jobs:

  #######
  ## Linked Issues
  #######

  # Checks linked issues or correct use of the exlusion label
  linked-issue:
    name: Verfiy linked issue status
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.BOARD_AUTOMATION }}
    permissions: write-all
    outputs:
      issue_id: ${{ steps.linked-issue.outputs.linked-issue-id }}
      issue_state: ${{ steps.linked-issue.outputs.linked-issue-state }}
      reviews-required: ${{ steps.linked-issue.outputs.num-reviews-required }}
    steps:
      - name: Get linked issue id and state
        id: linked-issue
        # yamllint disable rule:line-length
        run: |
          gh api graphql -f query='
            query($pr_url: URI!) {
              resource(url: $pr_url) {
                ... on PullRequest {
                  closingIssuesReferences(first: 1) {
                    nodes {
                      id
                      state
                    }
                  }
                  baseRepository {
                    __typename branchProtectionRules(first: 1) {
                      nodes {
                        requiredApprovingReviewCount
                      }
                    }
                  }
                }
              }
            }'  -f pr_url=$PR_URL > data.json
          echo "::set-output name=num-reviews-required::$(jq '.data.resource.baseRepository.branchProtectionRules.nodes[] | .requiredApprovingReviewCount' data.json)"
          echo "::set-output name=linked-issue-id::$(jq '.data.resource.closingIssuesReferences.nodes[] | .id' data.json)"
          echo "::set-output name=linked-issue-state::$(jq '.data.resource.closingIssuesReferences.nodes[] | .state' data.json)"
          echo 'LINKED_ISSUE_ID='$(jq '.data.resource.closingIssuesReferences.nodes[] | .id' data.json) >> $GITHUB_ENV
        # yamllint enable rule:line-length


      - name: Check for linked issue
        id: linked
        if: |
          env.LINKED_ISSUE_ID != '' && 
          contains(github.event.pull_request.labels.*.name, env.EXCLUDE_LABEL) != true
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log("Linked Issue Found!");
      

      - name: Check for allowed linked issue exclusion
        id: exclude-linked
        if: |
          ${{ github.actor == 'dependabot[bot]' }} || 
          (env.LINKED_ISSUE_ID == '' && 
          contains(github.event.pull_request.labels.*.name, env.EXCLUDE_LABEL) == true)
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log("Exclusion label added, no linked issue required!");


      - name: Check for linked issue exclusion error
        id: exclude-linked-error
        if: steps.linked.outcome == 'skipped' && steps.exclude-linked.outcome == 'skipped'
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log("No linked issue or exclusion label!");
            core.setFailed("Link an issue and rerun, or, add the exclusion label!");


      - name: Check for linked issue with no-issue label
        id: linked-and-nochangelog
        if: steps.linked.outcome == 'success' && steps.exclude-linked.outcome == 'success'
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log("Remove exclusion label, update the changelog: linked issue found!");
            core.setFailed("Remove exclusion label, update the changelog: linked issue found!");


  #######
  ## Project Board Automation
  #######

  # Gets Issue, PR and Project data in order move the item on the board 
  project-board:
    name: Update the project board
    needs: linked-issue
    runs-on: ubuntu-latest
    # TODO check these permissions
    permissions: write-all
    env:
      LINKED_ISSUE_STATE: ${{needs.linked-issue.outputs.issue_state}}
      LINKED_ISSUE_ID: ${{needs.linked-issue.outputs.issue_id}}
      REVIEWS_REQUIRED: ${{needs.linked-issue.outputs.reviews-required}}
    steps:
      - name: Get project data
        id: project-data
        # yamllint disable rule:line-length
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectNext(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      id
                      name
                      settings
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > data.json
          echo 'PROJECT_ID='$(jq '.data.organization.projectNext.id' data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== "Status") | .id' data.json) >> $GITHUB_ENV
          echo 'IN_PROGRESS_COLUMN='$(jq --arg in_progress ${{ env.IN_PROGRESS_COLUMN_NAME }} '.data.organization.projectNext.fields.nodes[] | select(.name== "Status") |.settings | fromjson.options[] | select(.name==$in_progress) |.id' data.json) >> $GITHUB_ENV
          echo 'REVIEW_REQUIRED_COLUMN='$(jq --arg review_required ${{ env.REVIEW_REQUIRED_COLUMN_NAME }} '.data.organization.projectNext.fields.nodes[] | select(.name== "Status") |.settings | fromjson.options[] | select(.name==$review_required) |.id' data.json) >> $GITHUB_ENV
          echo 'CHANGES_REQUESTED_COLUMN='$(jq --arg changes_requested ${{ env.CHANGES_REQUESTED_COLUMN_NAME }} '.data.organization.projectNext.fields.nodes[] | select(.name== "Status") |.settings | fromjson.options[] | select(.name==$changes_requested) |.id' data.json) >> $GITHUB_ENV
          echo 'APPROVED_COLUMN='$(jq --arg approved ${{ env.APPROVED_COLUMN_NAME }} '.data.organization.projectNext.fields.nodes[] | select(.name== "Status") |.settings | fromjson.options[] | select(.name==$approved) |.id' data.json) >> $GITHUB_ENV
          echo 'MERGED_COLUMN='$(jq --arg merged ${{ env.MERGED_COLUMN_NAME }} '.data.organization.projectNext.fields.nodes[] | select(.name== "Status") |.settings | fromjson.options[] | select(.name==$merged) |.id' data.json) >> $GITHUB_ENV
          echo 'ITERATION_FIELD_ID='$(jq --arg iteration_field_name $ITERATION_FIELD_NAME '.data.organization.projectNext.fields.nodes[] | select(.name==$iteration_field_name) | .id' data.json) >> $GITHUB_ENV
          echo 'CURRENT_ITERATION='$(jq --arg iteration_field_name $ITERATION_FIELD_NAME '.data.organization.projectNext.fields.nodes[] | select(.name==$iteration_field_name) |.settings | fromjson.configuration.iterations[0] | .id' data.json) >> $GITHUB_ENV
        # yamllint enable rule:line-length


      - name: Get PR state review status and author
        id: pr-status
        # yamllint disable rule:line-length
        run: |
          gh api graphql -f query='
            query($pr_url: URI!) {
              resource(url: $pr_url) {
                ... on PullRequest {
                  id
                  isDraft
                  state
                  author{
                    login
                  }
                  reviews(last: 100 states: APPROVED) {
                    totalCount
                  }
                  latestReviews(last: 1) {
                    edges {
                      node {
                        state
                      }
                    }
                  }
                }
              }
            }'  -f pr_url=$PR_URL > data.json
          echo 'NUM_REVIEWS='$(jq '.data.resource.reviews | .totalCount' data.json) >> $GITHUB_ENV
          echo 'LATEST_REVIEW_STATE='$(jq '.data.resource.latestReviews.edges[] | .node | .state' data.json) >> $GITHUB_ENV
          echo 'IS_PR_DRAFT='$(jq '.data.resource | .isDraft' data.json) >> $GITHUB_ENV
          echo 'PR_STATE='$(jq '.data.resource | .state' data.json) >> $GITHUB_ENV
          echo 'PR_ID='$(jq '.data.resource | .id' data.json) >> $GITHUB_ENV
          echo 'AUTHOR_NAME='$(jq '.data.resource.author | .login' data.json) >> $GITHUB_ENV
        # yamllint enable rule:line-length


      - name: Get PR author id
        id: pr-author
        if: steps.pr-status.outcome == 'success'
        env:
          AUTHOR_NAME: ${{ env.AUTHOR_NAME }}
        # yamllint disable rule:line-length
        run: |
          gh api graphql -f query='
            query($author_name: String!) {
              search (query: $author_name, type: USER, first: 1){
                edges {
                  node {
                    ... on User {
                      id
                    }
                  }
                }
              }
            }'  -f author_name=$AUTHOR_NAME > data.json
          echo 'AUTHOR_ID='$(jq '.data.search.edges[] | .node | .id' data.json) >> $GITHUB_ENV
        # yamllint enable rule:line-length


      - name: Add linked issue to the project
        id: issue-to-project
        if: |
          env.LINKED_ISSUE_ID != '' && 
          contains(github.event.pull_request.labels.*.name, env.EXCLUDE_LABEL) != true
        # yamllint disable rule:line-length
        run: |
          issue_item_id="$( gh api graphql -f query='
            mutation($project:ID!, $issue:ID!) {
              addProjectNextItem(input: {projectId: $project, contentId: $issue}) {
                projectNextItem {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f issue=$LINKED_ISSUE_ID --jq '.data.addProjectNextItem.projectNextItem.id')"
          echo 'ISSUE_ITEM_ID='$issue_item_id >> $GITHUB_ENV
        # yamllint enable rule:line-length

      - name: Add no-issue PR to the project
        id: pr-to-project
        if: |
          ${{ github.actor == 'dependabot[bot]' }} || 
          (steps.issue-to-project.outcome == 'skipped' && 
          contains(github.event.pull_request.labels.*.name, env.EXCLUDE_LABEL) == true)
        # yamllint disable rule:line-length
        run: |
          pr_item_id="$( gh api graphql -f query='
            mutation($project:ID!, $pr:ID!) {
              addProjectNextItem(input: {projectId: $project, contentId: $pr}) {
                projectNextItem {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f pr=$PR_ID --jq '.data.addProjectNextItem.projectNextItem.id')"
          echo 'PR_ITEM_ID='$pr_item_id >> $GITHUB_ENV
        # yamllint enable rule:line-length


      - name: Reopen if linked issue closed
        id: reopen-issue
        if: steps.issue-to-project.outcome == 'success' && env.LINKED_ISSUE_STATE == '"CLOSED"'
        env: 
          ISSUE: ${{ env.LINKED_ISSUE_ID }}
          PR_AUTHOR: ${{ env.AUTHOR_ID }}
        run: |
          gh api graphql -f query='
            mutation($clientMutationId:String!, $issueId:ID!) {
              reopenIssue(input: {clientMutationId:$clientMutationId, issueId:$issueId}) {
                issue{
                  id
                }
              }
            }' -f clientMutationId=${{ env.PR_AUTHOR }} \
              -f issueId=${{ env.ISSUE }}


      #######
      ## Draft PRs
      #######
      - name: Move draft no-issue PR to in progress column
        id: draft-pr-nochangelog
        if: steps.pr-to-project.outcome == 'success' && env.IS_PR_DRAFT == 'true'
        env:
          ITEM_ID: ${{  env.PR_ITEM_ID }}
          CURRENT_STATUS: ${{ env.IN_PROGRESS_COLUMN }}
        run: |
          echo 'ITEM_ID='$ITEM_ID >> $GITHUB_ENV
          echo 'CURRENT_ITERATION='$CURRENT_ITERATION >> $GITHUB_ENV
          echo 'CURRENT_STATUS='$CURRENT_STATUS >> $GITHUB_ENV


      - name: Move linked-issue (draft PR) to in progress column
        id: draft-pr-issue
        if: steps.issue-to-project.outcome == 'success' && env.IS_PR_DRAFT == 'true'
        env:
          ITEM_ID: ${{ env.ISSUE_ITEM_ID }}
          CURRENT_STATUS: ${{ env.IN_PROGRESS_COLUMN }}
        run: |
          echo 'ITEM_ID='${{ env.ISSUE_ITEM_ID }} >> $GITHUB_ENV
          echo 'CURRENT_ITERATION='$CURRENT_ITERATION >> $GITHUB_ENV
          echo 'CURRENT_STATUS='$CURRENT_STATUS >> $GITHUB_ENV


      #######
      ## Review Required
      #######
      - name: Move linked-issue to review required column
        id: linked-issue-review-required
        if: |
          steps.issue-to-project.outcome == 'success' && steps.pr-to-project.outcome == 'skipped' 
          && (env.LATEST_REVIEW_STATE == ''|| contains(github.event.*.name, 'ready_for_review') == true) 
          && env.IS_PR_DRAFT == 'false'
        run: |
          echo 'ITEM_ID='$ISSUE_ITEM_ID >> $GITHUB_ENV
          echo 'CURRENT_STATUS='${{ env.REVIEW_REQUIRED_COLUMN }} >> $GITHUB_ENV


      - name: Move no-issue PR to review required column
        id: pr-nochangelog-review-required
        if: |
          steps.pr-to-project.outcome == 'success' && steps.issue-to-project.outcome == 'skipped' 
          && (env.LATEST_REVIEW_STATE == '' || contains(github.event.*.name, 'ready_for_review') == true) 
          && env.IS_PR_DRAFT == 'false'
        run: |
          echo 'ITEM_ID='$PR_ITEM_ID >> $GITHUB_ENV
          echo 'CURRENT_STATUS='${{ env.REVIEW_REQUIRED_COLUMN }} >> $GITHUB_ENV


      #######
      ## Changes Requested
      #######
      - name: Move linked-issue to changes requested column 
        id: linked-issue-changes-requested
        if: |
          steps.issue-to-project.outcome == 'success' && steps.pr-to-project.outcome == 'skipped' 
          && (env.LATEST_REVIEW_STATE == '"CHANGES_REQUESTED"' || env.LATEST_REVIEW_STATE == '"COMMENTED"' 
          || (env.LATEST_REVIEW_STATE == '"APPROVED"' && env.NUM_REVIEWS < env.REVIEWS_REQUIRED)) 
          && env.IS_PR_DRAFT == 'false'
        run: |
          echo 'ITEM_ID='$ISSUE_ITEM_ID >> $GITHUB_ENV
          echo 'CURRENT_STATUS='${{ env.CHANGES_REQUESTED_COLUMN }} >> $GITHUB_ENV


      - name: Move no-issue PR to changes requested column
        id: pr-nochangelog-changes-requested 
        if: |
          steps.pr-to-project.outcome == 'success' && steps.issue-to-project.outcome == 'skipped' 
          && (env.LATEST_REVIEW_STATE == '"CHANGES_REQUESTED"' || env.LATEST_REVIEW_STATE == '"COMMENTED"' 
          || (env.LATEST_REVIEW_STATE == '"APPROVED"' && env.NUM_REVIEWS < env.REVIEWS_REQUIRED)) 
          && env.IS_PR_DRAFT == 'false'
        run: |
          echo 'ITEM_ID='$PR_ITEM_ID >> $GITHUB_ENV
          echo 'CURRENT_STATUS='${{ env.CHANGES_REQUESTED_COLUMN }} >> $GITHUB_ENV


      #######
      ## Approved
      #######
      - name: Move linked-issue to approved column
        id: linked-issue-approved
        if: |
          steps.issue-to-project.outcome == 'success' && steps.pr-to-project.outcome == 'skipped' 
          && env.LATEST_REVIEW_STATE == '"MERGED"'
        run: |
          echo 'ITEM_ID='$ISSUE_ITEM_ID >> $GITHUB_ENV
          echo 'CURRENT_STATUS='${{ env.APPROVED_COLUMN }} >> $GITHUB_ENV


      - name: Move no-issue PR to approved column
        id: pr-nochangelog-approved 
        if: |
          steps.pr-to-project.outcome == 'success' && steps.issue-to-project.outcome == 'skipped'
          && env.LATEST_REVIEW_STATE == '"MERGED"'
        run: |
          echo 'ITEM_ID='$PR_ITEM_ID >> $GITHUB_ENV
          echo 'CURRENT_STATUS='${{ env.APPROVED_COLUMN }} >> $GITHUB_ENV


      #######
      ## MERGED
      #######
      - name: Move merged items to merged column
        id: merged
        if: |
          (steps.issue-to-project.outcome == 'success' && steps.pr-to-project.outcome == 'skipped')
          && (env.LATEST_REVIEW_STATE == '"APPROVED"') && env.IS_PR_DRAFT == 'false'
          && (env.NUM_REVIEWS >= env.REVIEWS_REQUIRED)
        run: |
          echo 'ITEM_ID='$ISSUE_ITEM_ID >> $GITHUB_ENV
          echo 'CURRENT_STATUS='${{ env.MERGED_COLUMN }} >> $GITHUB_ENV

      - name: Move no-changelog PR to approved
        id: pr-nochangelog-merged 
        if: |
          (steps.pr-to-project.outcome == 'success' && steps.issue-to-project.outcome == 'skipped')
          && (env.LATEST_REVIEW_STATE == '"MERGED"') && env.IS_PR_DRAFT == 'false'
          && (env.NUM_REVIEWS >= env.REVIEWS_REQUIRED)
        run: |
          echo 'ITEM_ID='$PR_ITEM_ID >> $GITHUB_ENV
          echo 'CURRENT_STATUS='${{ env.MERGED_COLUMN }} >> $GITHUB_ENV


      #######
      ## Skip moving items
      #######
      - name: Abort update as review dismissed or pending 
        id: skip-update
        if: |
          (steps.issue-to-project.outcome == 'success' || steps.pr-to-project.outcome == 'success') 
          && (env.LATEST_REVIEW_STATE == '"PENDING"' || env.LATEST_REVIEW_STATE == '"DISMISSED"') && env.IS_PR_DRAFT != 'true'
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log("Review pending or dismissed - skipping board update!");


      #######
      ## Set the Project Fields
      #######
      - run: env

      - name: Set custom and status fields
        if: steps.skip-update.outcome == 'skipped'
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
              $iteration_field: ID!
              $iteration_value: String!
            ) {
              set_status: updateProjectNextItemField(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: $status_value
              }) {
                projectNextItem {
                  id
                  }
              }
              set_iteration: updateProjectNextItemField(input: {
                projectId: $project
                itemId: $item
                fieldId: $iteration_field
                value: $iteration_value
              }) {
                projectNextItem {
                  id
                }
              }
            }' -f project=$PROJECT_ID \
              -f item=$ITEM_ID \
              -f status_field=$STATUS_FIELD_ID \
              -f status_value=${{ env.CURRENT_STATUS }} \
              -f iteration_field=$ITERATION_FIELD_ID \
              -f iteration_value=${{ env.CURRENT_ITERATION }}
